name: Deploy Lambda Function

on:
  push:
    branches:
      - dev
    #   - stage
    #   - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
        #   - stage
        #   - prod

jobs:
  determine_environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
    steps:
      - name: Set environment based on branch or manual input
        id: set-env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" == "refs/heads/stage" ]; then
            echo "environment=stage" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi

  test_app:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          cd app
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Test with pytest
        run: |
          cd app
          # Add this once you have tests in place
          # pytest -v --cov=.
          echo "No tests defined yet - this is a placeholder"

  validate_terraform:
    needs: test_app
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Format Check
        run: terraform fmt -check -recursive

      - name: Validate Dev Configuration
        run: |
          cd environments/dev
          terraform init -backend=false
          terraform validate

      - name: Validate Stage Configuration
        run: |
          cd environments/stage
          terraform init -backend=false
          terraform validate

      - name: Validate Prod Configuration
        run: |
          cd environments/prod
          terraform init -backend=false
          terraform validate

  deploy:
    needs: [determine_environment, validate_terraform]
    runs-on: ubuntu-latest
    environment: ${{ needs.determine_environment.outputs.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Terraform Init
        working-directory: environments/${{ needs.determine_environment.outputs.environment }}
        run: terraform init

      - name: Terraform Plan
        working-directory: environments/${{ needs.determine_environment.outputs.environment }}
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        working-directory: environments/${{ needs.determine_environment.outputs.environment }}
        run: terraform apply -auto-approve tfplan

      - name: Output API Endpoint
        working-directory: environments/${{ needs.determine_environment.outputs.environment }}
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "Environment: ${{ needs.determine_environment.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "API Endpoint: $(terraform output -raw api_endpoint)" >> $GITHUB_STEP_SUMMARY
          echo "Hello Endpoint: $(terraform output -raw hello_endpoint)" >> $GITHUB_STEP_SUMMARY
          echo "Lambda Function: $(terraform output -raw lambda_function_name)" >> $GITHUB_STEP_SUMMARY
          echo "CloudWatch Dashboard: $(terraform output -raw dashboard_url)" >> $GITHUB_STEP_SUMMARY
